/*
This Source Code Form is subject to the terms of the Mozilla
Public License, v. 2.0. If a copy of the MPL was not distributed
with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

// Aliases
namespace gl {
    alias Byte = 0x1400;
    alias UByte = 0x1401;
    alias Short = 0x1402;
    alias UShort = 0x1403;
    alias Int = 0x1404;
    alias UInt = 0x1405;
    alias Float = 0x1406;
    alias Double = 0x140A;
    alias Byte = 0x1400;

    alias FrameBuffer = 0x8D40;
    alias RenderBuffer = 0x8D41;

    alias colorAttachment0 = 0x8CE0;
    alias colorAttachment1 = 0x8CE1;
    alias colorAttachment2 = 0x8CE2;
    alias colorAttachment3 = 0x8CE3;
    alias colorAttachment4 = 0x8CE4;
    alias colorAttachment5 = 0x8CE5;
    alias colorAttachment6 = 0x8CE6;
    alias colorAttachment7 = 0x8CE7;
    alias colorAttachment8 = 0x8CE8;
    alias colorAttachment9 = 0x8CE9;
    alias colorAttachment10 = 0x8CEA;
    alias colorAttachment11 = 0x8CEB;
    alias colorAttachment12 = 0x8CEC;
    alias colorAttachment13 = 0x8CED;
    alias colorAttachment14 = 0x8CEE;
    alias colorAttachment15 = 0x8CEF;
    alias colorAttachment16 = 0x8CF0;
    alias colorAttachment17 = 0x8CF1;
    alias colorAttachment18 = 0x8CF2;
    alias colorAttachment19 = 0x8CF3;
    alias colorAttachment20 = 0x8CF4;
    alias colorAttachment21 = 0x8CF5;
    alias colorAttachment22 = 0x8CF6;
    alias colorAttachment23 = 0x8CF7;
    alias colorAttachment24 = 0x8CF8;
    alias colorAttachment25 = 0x8CF9;
    alias colorAttachment26 = 0x8CFA;
    alias colorAttachment27 = 0x8CFB;
    alias colorAttachment28 = 0x8CFC;
    alias colorAttachment29 = 0x8CFD;
    alias colorAttachment30 = 0x8CFE;
    alias colorAttachment31 = 0x8CFF;

    alias depthAttachment = 0x8D00;
    alias stencilAttachment = 0x8D20;

    alias Points = 0x0000;
    alias Lines = 0x0001;
    alias LineLoop = 0x0002;
    alias LineStrip = 0x0003;
    alias Triangles = 0x0004;
    alias TriangleStrip = 0x0005;
    alias TriangleFun = 0x0006;
    alias Quads = 0x0007;
    alias QuadStrip = 0x0008;
    alias Polygon = 0x0009;

    alias VertexArray = 0x8074;
    alias NormalArray = 0x8075;
    alias ColorArray = 0x8076;
    alias IndexArray = 0x8077;
    alias TextureCoordArray = 0x8078;
    alias EdgeFlagArray = 0x8079;
    alias VertexArraySize = 0x807A;
    alias VertexArrayType = 0x807B;
    alias VertexArrayStride = 0x807C;

    alias MatrixMode = 0x0BA0;
    alias ModelView = 0x1700;
    alias Projection = 0x1701;
    alias Texture = 0x1702;

    alias PointSmooth = 0x0B10;
    alias PointSize = 0x0B11;
    alias PointSizeGranularity = 0x0B13;
    alias PointSizeRange = 0x0B12;

    alias LineSmooth = 0x0B20;
    alias LineStripple = 0x0B24;
    alias LineWidth = 0x0B21;

    alias Point = 0x1B00;
    alias Line = 0x1B01;
    alias Fill = 0x1B02;
    alias CW = 0x0900;
    alias CCW = 0x0901;
    alias Front = 0x0404;
    alias Back = 0x0405;
    alias PolygonMode = 0x0B40;
    alias PolygonSmooth = 0x0B41;
    alias PolygonStipple = 0x0B42;
    alias EdgeFlag = 0x0B43;

    alias Compile = 0x1300;
    alias CompileAndExecute = 0x1301;

    alias CompileStatus = 0x8B81;

    alias Never = 0x0200;
    alias Less = 0x0201;
    alias Equal = 0x0202;
    alias Lequal = 0x0203;
    alias Greater = 0x0204;
    alias Nequal = 0x0205;
    alias Gequal = 0x0206;
    alias Always = 0x0207;

    alias Position = 0x1203;
    alias Smooth = 0x1D01;
    alias Flat = 0x1D00;
    alias Normalize = 0x0BA1;

    alias Blend = 0x0BE2;
    alias Zero = 0;
    alias One = 1;

    alias Render = 0x1C00;
    alias Select = 0x1C02;

    alias Mode2D = 0x0600;
    alias Mode3D = 0x0601;

    alias SelectionBufferPointer = 0x0DF3;
    alias SelectionBufferSize = 0x0DF4;

    alias Fog = 0x0B60;
    alias FogMode = 0x0B65;

    alias StencilBits = 0x0D57;
    alias StencilClearValue = 0x0B91;
    alias StencilIndex = 0x1901;

    alias None = 0;
    alias Left = 0x0406;
    alias Right = 0x0407;
    alias Depth = 0x1801;
    alias Stencil = 0x1802;

    alias RGB = 0x1907;
    alias RGBA = 0x1908;
    alias RGBA32F = 0x8814;
    alias RGB32F = 0x8815;
    alias RGBA16F = 0x881A;
    alias RGB16F = 0x881B;

    alias ViewPort = 0x0BA2;
    alias RenderMode = 0x0C40;
    alias RGBAMode = 0x0C31;

    alias Fastest = 0x1101;
    alias Nicest = 0x1102;

    alias Texture2D = 0x0DE1;
    alias TextureWrapS = 0x2802;
    alias TextureWrapT = 0x2803;
    alias TextureMagFilter = 0x2800;
    alias TextureMinFilter = 0x2801;
    alias TextureEnvColor = 0x2201;
    alias TextureWidth = 0x1000;
    alias TextureHeight = 0x1001;
    alias TextureBorder = 0x1002;
    alias TextureComponents = 0x1003;
    alias NearestMipMapNearest = 0x2700;
    alias NearestMipMapLinear = 0x2702;
    alias LinearMipMapNearest = 0x2701;
    alias LinearMipMapLinear = 0x2703;
    alias ObjectLinear = 0x2401;
    alias Renderer = 0x1F01;

    alias Repeat = 0x2901;

    alias TextureBorderColor = 0x1004;
    alias ClampToBorder = 0x812D;
    alias Nearest = 0x2600;
    alias Linear = 0x2601;

    alias ArrayBuffer = 0x8892;
    alias Buffer = 0x82E0;
    alias ElementArrayBuffer = 0x8893;

    alias ColorBufferBit = 0x00004000;
    alias DepthBufferBit = 0x00000100;
    alias StencilBufferBit = 0x00000400;

    alias FragmentShader = 0x8B30;
    alias VertexShader = 0x8B31;
    alias ShaderType = 0x8B4F;
    alias LinkStatus = 0x8B82;

    alias MajorVersion = 0x821B;
    alias MinorVersion = 0xB21C;

    alias StreamDraw = 0x88E0;
    alias StaticDraw = 0x88E4;
    alias DynamicDraw = 0x88E8;

    alias Texture0 = 0x84C0;
    alias Texture1 = 0x84C1;
    alias Texture2 = 0x84C2;
    alias Texture3 = 0x84C3;
    alias Texture4 = 0x84C4;
    alias Texture5 = 0x84C5;
    alias Texture6 = 0x84C6;
    alias Texture7 = 0x84C7;
    alias Texture8 = 0x84C8;
    alias Texture9 = 0x84C9;
    alias Texture10 = 0x84CA;
    alias Texture11 = 0x84CB;
    alias Texture12 = 0x84CC;
}

// Functions
namespace gl {
    extern(linkname: "glVertex2d") void Vertex2d(double one, double two);
    extern(linkname: "glVertex2f") void Vertex2f(float one, float two);
    extern(linkname: "glVertex2i") void Vertex2i(int one, int two);
    extern(linkname: "glVertex2s") void Vertex2s(short one, short two);

    extern(linkname: "glVertex3d") void Vertex3d(double one, double two, double three);
    extern(linkname: "glVertex3f") void Vertex3f(float one, float two, float three);
    extern(linkname: "glVertex3i") void Vertex3i(int one, int two, int three);
    extern(linkname: "glVertex3s") void Vertex3s(short one, short two, short three);

    extern(linkname: "glVertexAttribPointer") void VertexAttribPointer(uint index, int size, int type, bool normalized, int stride, void* ptr);

    extern(linkname: "glGenBuffers") void GenBuffers(int n, uint* buffers);
    extern(linkname: "glGenerateMipmap") void GenMipMap(int target);
    extern(linkname: "glGenerateTextureMipmap") void GenTextureMipMap(uint texture);
    extern(linkname: "glGenFramebuffers") void glGenFramebuffers(int n, uint* framebuffers);

    extern(linkname: "glDeleteBuffers") void DeleteBuffers(int n, uint* buffers);
    extern(linkname: "glBindBuffer") void BindBuffer(int target, uint buffer);

    extern(linkname: "glDrawArrays") void DrawArrays(int mode, int first, int n);
    extern(linkname: "glDrawElements") void DrawElements(int mode, int n, int type, void* indices);

    extern(linkname: "glCreateShader") uint CreateShader(int type);
    extern(linkname: "glCreateProgram") uint CreateProgram();
    extern(linkname: "glDeleteProgram") void DeleteProgram(uint p);
    extern(linkname: "glDeleteShader") void DeleteShader(uint s);

    extern(linkname: "glGetAttribLocation") int GetAttribLoc(uint program, const(char)* name);
    extern(linkname: "glGetShaderiv") void GetShaderiv(uint s, int pn, int* params);
    extern(linkname: "glGetShaderInfoLog") void GetShaderInfoLog(uint s, int bufferSize, int* len, char* buffer);

    extern(linkname: "glDisableVertexAttribArray") void DisableVertexAttribArray(uint index);
    extern(linkname: "glEnableVertexAttribArray") void EnableVertexAttribArray(uint index);

    extern(linkname: "glBufferData") void BufferData(int target, int size, void* data, int usage);
    extern(linkname: "glBindTexture") void BindTexture(int target, uint tex);
    extern(linkname: "glBufferSubData") void BufferSubData(int target, int offset, int size, void* data);
    extern(linkname: "glClearColor") void ClearColor(float r, float g, float b, float a);
    extern(linkname: "glClear") void Clear(int t);
    extern(linkname: "glCompileShader") void CompileShader(uint s);

    extern(linkname: "glLinkProgram") void LinkProgram(uint pr);
    extern(linkname: "glAttachShader") void AttachShader(uint pr, uint s);
    extern(linkname: "glShaderSource") void ShaderSource(uint s, int n, char** str, int* len);
    extern(linkname: "glUseProgram") void UseProgram(uint pr);

    extern(linkname: "glGenVertexArrays") void GenVertexArrays(int n, uint* arrays);
    extern(linkname: "glBindVertexArray") void BindVertexArray(uint arr);
    extern(linkname: "glDeleteVertexArrays") void DeleteVertexArrays(int n, uint* arr);

    extern(linkname: "glTexParameteri") void TexParameteri(int target, int pn, int param);
    extern(linkname: "glTexImage2D") void TexImage2D(int target, int l, int internalf, int w, int h, int b, int form, int t, void* pix);

    extern(linkname: "glUniform1f") void Uniform1f(int loc, float v);
    extern(linkname: "glUniform1i") void Uniform1i(int loc, int v);
    extern(linkname: "glUniform2f") void Uniform2f(int loc, float v, float v2);
    extern(linkname: "glUniform2i") void Uniform2i(int loc, int v, int v2);
    extern(linkname: "glUniform3f") void Uniform3f(int loc, float v, float v2, float v3);
    extern(linkname: "glUniform3i") void Uniform3i(int loc, int v, int v2, int v3);
    extern(linkname: "glUniform4f") void Uniform4f(int loc, float v, float v2, float v3, float v4);
    extern(linkname: "glUniform4i") void Uniform4i(int loc, int v, int v2, int v3, int v4);
    extern(linkname: "glUniformMatrix2fv") void UniformMatrix2fv(int l, int n, bool transp, float* vals);
    extern(linkname: "glUniformMatrix3fv") void UniformMatrix3fv(int l, int n, bool transp, float* vals);
    extern(linkname: "glUniformMatrix4fv") void UniformMatrix4fv(int l, int n, bool transp, float* vals);

    extern(linkname: "glVertexAttrib1f") void VertexAttrib1f(int index, float v);
    extern(linkname: "glVertexAttrib2f") void VertexAttrib2f(int index, float v, float v2);
    extern(linkname: "glVertexAttrib3f") void VertexAttrib3f(int index, float v, float v2, float v3);
    extern(linkname: "glVertexAttrib4f") void VertexAttrib4f(int index, float v, float v2, float v3, float v4);

    extern(linkname: "glViewport") void ViewPort(int w, int h, int x, int y);
    extern(linkname: "glGetProgramiv") void GetProgramiv(uint id, int t, int* s);
    extern(linkname: "glGetProgramInfoLog") void GetProgramInfoLog(uint id, int c, int* l, char* buffer);

    extern(linkname: "glGenTextures") void GenTextures(int n, uint* where);
    extern(linkname: "glActiveTexture") void ActiveTexture(int n);

    extern(linkname: "glBindFramebuffer") void glBindFramebuffer(uint target, uint framebuffer);
    extern(linkname: "glFramebufferTexture2D") void glFramebufferTexture2D(uint target, uint attachment, uint textarget, uint texture, int level);
}